컬렉션 프레임웍?

데이터 군을 저장하는 클래스들을 표준화한 설계

컬렉션은 다수의 데이터, 즉 데이터 그룹
프레임웍은 표준화된 프로그래밍 방식을 의미

java.util 패키지를 중심으로 실제 프로그래밍에서 자주 사용되는 
클래스들을 골라서 다음과 같이 세 가지 그룹으로 나누었다
1.컬렉션 프레임웍
다수의 데이터를 쉽게 처리할 수 있는 표준화된 방법을 제공하는 클래스들
2.유용한 클래스
알아두면 좋은 자주 쓰이는 클래스들
3.형식화 클래스
데이터를 표준화된 형식으로 출력하는데 도움을 주는 클래스들

인터페이스			특징
List		순서가 있는 데이터의 집합, 데이터의 중복을 허용한다
Set			순서를 유지하지 않는 데이터의 집합, 데이터의 중복을 허용하지 않는다
Map			키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합
			순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다
			
			
Deep Copy(깊은 복사)
원본의 데이터가 바뀐다 할지라도 복사본은 완전히 독립적인 객체이다
numArr[0] = numberArr[0];

Shallow Copy(얕은 복사)
원본이 변경되면 복사본도 같이 변경된다
numArr = numberArr;
			
			
제너릭스(Generics)			
다양한 타입의 객체들을 다루는 메서드나 컬렉션 클래스에 컴파일 시의 타입 체크를 해주는
기능이다.

객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의
번거로움이 줄어든다.

ArrayList와 같은 컬렉션 클래스는 다양한 종류의 객체를 담을 수 있긴 하지만
보통 한 종류의 객체를 담는 경우가 더 많다
그런데 꺼낼 때 마다 타입체크를 하고 형변환을 하는 것은 아무래도 불편할 수 밖에 없다

제너릭스의 장점
- 타입 안정성을 제공한다
- 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다





Iterator
컬렉션 프레임웍에서는 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화하였다
컬렉션에 저장된 각 요소에 접근하는 기능을 가진 Iterator 인터페이스를 정의했다

Iterator는 반복문 (주로 while)을 사용해서 컬렉션클래스의 요소들을 읽어 올 수 있다

메서드
- boolean hasNext()
읽어 올 요소가 남아있는지 확인한다. 있으면 true 없으면 false를 반환한다
- Object next()
다음 요소를 읽어 온다. next()를 호출하기 전에 hasNext()를 호출해서 읽어 올
요소가 있는지 확인하는 것이 안전하다.




Map			키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합
			순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다




			


